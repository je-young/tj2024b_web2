[ 컴포넌트 ]
    1. 컴포넌트는 UI 를 구성한는 독립적인 재사용 가능한 작은 단위
    2. HTML + CSS + JS 를 하나의 파일로 관리가 가능하여 유지보수 쉽다.

[ JSX ]
    1. JS 코드 안에서 HTML 과 비슷한 문법을 사용할 수 있도록 만든 확장 문법
    2. 브라우저 직접 JSX 를 이해하지 못하므로 리액트가 렌더링이 필요하다.
    3. 특징
        1. JSX 는 HTML 처럼 보이지만 HTML 과 다르다. !!! HTML 보다 유효성 강력
            (1) 카멜표기법 필수 사용, *카멜표기법이란? 첫단어의 첫글자는 소문자로 시작 두번째 단어의 첫글자는 대문자 : mycar -> myCar
            (2) 마크업 close 필수 사용 , <마크업> </마크업>
                <input > [x] --> <input />

        2. JSX 는 반드시 전체를 감싸는 상위 요소가 필수
            return <div> 내용 </div>
            return <> 내용 </>

        3. JSX 는 두줄 이상의 문법 작성할때는 ( ) 소괄호 감싼다.
            return(
              <div>
                  내용
              </div>
            )
        
        4. JSX 는 문법에서 JS 표현식 가능 { } , 표현식 가능하지만 선언식 불가능 하다.
            return <div> { 10 + 20 } </div>

        5. JSX 는 주석처리
            { /* 주석 */ }

        6. JSX 에서 CSS 사용법
            import '경로/파일명.css'
            class 속성명 대신에 className 속성명 사용한다.
            * 인라인 형식의 css 는 카멜표기법

    4. JSX 생성하는 방법
        (1) 파일의 확장자를 .jsx 로 생성한다.
        (2) 함수 하나 생성한다. props 매개변수 필수로 넣어준다.
            function 함수명( props ) { }
        (3) 함수 안에서 return 뒤로 JSX 문법 작성한다.
        (4) .JSX 파일내 기본적으로 import 반환할 컴포넌트 함수를 선언한다.
            export default function 함수명( props ){ }

    5. 컴포넌트 매개변수 props
        1. 부모 컴포넌트로 부터 자식 컴포넌트에게 데이터 전달 방법
        2. 자식은 전달받은 props 를 읽기모드로 사용 가능하다. (수정금지)
        3. 사용법
            function 부모컴포넌트( props ) {
              return ( <.> < 자식컴포넌트 속성명={값} 속성명={값} /> </>)
            }

            function 자식컴포넌트( props ) {
              
            }