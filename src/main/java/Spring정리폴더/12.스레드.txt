* 용어
    1. 프로그램 : 코드(명령어)의 집합
    2. 프로세스 : 실행중인 프로그램
    3. 멀티 태스킹 : 두가지 이상의 작업을 동시 처리
    4. 멀티 프로세스 : 운영체제가 동시에 여러개 프로세스 생성하여 처리
        - 멀티 프로세스는 프로그램 단위의 멀티 태스킹
        - 멀티 스레드는 프로그램 내부 에서의 멀티 태스킹

[ 스레드 ]
    1. 정의 : 프로세스 내에서 실행되는 작업 단위 , 각 프로세스는 최소 1개의 스레드 포함
        -> 그래서 자바는 main함수가 main스레드를 포함 하므로써 하나의 프로세스(프로그램) 만들 수 있다.
        -> 왜? 자바스크립트는 왜 스레드(main함수) 존재하지 않을까? 브라우저(프로그램/스레드)가 JS 읽어드리기 떄문에
    2. 목적 : 코드(명령어)를 읽어드리고 CPU 가 처리한다.
    3. 자바에서의 스레드
        -> main함수 : public static void main(String[] args) 에는 main스레드가 내장 됨.

[ 멀티 스레드 ]
    1. 정의 : main(스레드) 외 새로운 (작업)스레드를 생성하는 경우
    2. 목적 : *병렬처리*
    3. 사용처 : 동기화/비동기화 처리 , 채팅(socket)/파일전송/RESTAPI/JDBC 등등
    4. 사용법
        Thread 클래스 : 새로운 스레드를 생성할때 사용되는 클래스 , 다른 클래스를 상속받을 수 없다.
            -> 주 메소드
                run()   : 새로운 스레드가 처리(실행)할 코드 정의
                start() : 새로운 스레드 실행

        Runnable 인터페이스 : 새로운 스레드를 생성할때 사용되는 인터페이스 , 다른 클래스를 상속할 수 있다.
            -> 주 추상메소드
                run()   : 새로운 스레드가 처리(실행)할 코드 정의

        (1) Thread 상속
            class 클래스명 extends Thread{ @Override run(){} }

        (2) implements Runnable 구현 *구현체
            class 클래스명 implements Runnable{
                 @Override run(){}
            }
        (3) *익명구현체
            new Thread( new Runnable(){  @Override run(){}  }  );

    5. 용어
        (*)         클래스             vs      인터페이스
        차이점       함수의구현                   핵심(함수의추상) , 버전에 따라 구현도 가능
                    멤버변수o                   멤버변수x 상수변수o
                    인스턴스(객체)생성가능        인스턴스(객체) 생성 불가능 , +익명객체 구현하면 가능.

        (*)
                    extends(상속)     vs      implements(구현)
        차이점         하나의클래스만              여러개의인터페이스가능
                      클래스상속                 인터페이스구현

        (*)
        구현(객)체 : 추상메소드를 갖는 인터페이스를 구현한 클래스의 객체
        익명(객)체 : 추상메소드를 즉석에서 구현한 객체
            new 인터페이스명(){ ... }
            ... : 익명객체 구현

6. 동기화 vs 동기화
    1. 동기화 키원드 : synchronized
    2. 동기화 사용법 :
        (방법1) 매소드 선언부 의 반환타입 앞에 'synchronized' 키워드
        (방법2) synchronized( this ) { } 블럭 이용한
    3. 동기화 목적
        멀티 스레드 에서 하나의 자원을 동시에 접근할때 충돌 방지
    4. 비교
                 동기화                         비동기화
        차이점    한번에 하나의 스레드가 처리         여러개의 스레드가 동시처리
                 순서 보장 된다                   순서 보장 안된다

    5. 스레드풀
        1. 정의 : 미리 일정 개수의 스레드를 생성하고 필요헤 따라 재사용하는 방식
            -> 작업이 들어올때 마다 새로운 스레드가 아닌 기존 스레드를 재사용
        2. 목적 : 스레드 재사용, 자원효율성, 과부하 방지 등등
        3. 구조예시 : 작업의 요청을 '큐'라는 자료구조로 배치하여 순서대로 스레드풀에서 대기중인 스레드에게 작업 배정
            * 큐 : 작업의 순서를 요청 순서대로 자료를 구조하는 방법
                ---------------------------
            입구  [요청4] [요청3] [요청2] [요청1] 출구
                ---------------------------
        4. 생활속 예시 :
            예] 콜센터 :
                            스레드풀[콜센터지점]
                            전화를 받는 사람1[스레드]
                 콜요청       전화를 받는 사람2[스레드]
                            전화를 받는 사람3[스레드]

        5. 사용처 : 1.톰켓(서블릿) 2.JDBC 3.파일처리 등등 ( 대규모 작업 )
        6. 사용법
            1. 정해진 스레드 개수로 스레드풀 생성한다.
                ExecutorService 변수명 = Executors.newFixedThreadPool( 정해진 스레드 개수 );
            2. 스레드풀에 스레드 등록한다.
                변수명.submit( 등록할스레드 );
            3. 스레드풀 종료
                변수명.shutdown();

    [ 스프링 스레드 ]
        1. 사용법
            1. AppStart 클래스 위에 '@EnableAsync' 키워드 적용 하여 톰캣 스레드와 별도릐 비동기 기능 활성화
            2. 비동기 기능을 적용할 메소드 위에 '@Async' 키워드 적용 하여 비동기 메서드 정의
            3. 동기 기능을 적용할 메서드 반환타입 앞에 'synchronized' 키워드 적용 하여 동기 기능 활성화 또는 synchronized( this ) { } 블럭 이용한 동기 기능 활성화

    [ 스프링 스레드풀 ]
        1. 정의 : 스프링은 기본적으로 스레드풀을 사용한다.
        2. 목적 : 커스텀을 사용하여 스레드풀 정의 하기.
        3. 사용법

    [ 스프링 스케줄링 ]
        1. 정의 : 일정한 간격으로 특정 메서드를 자동 실행 기능 제공
        2. 목적
            1. 백그라운드(백엔드) 에서 자동 실행
            2. 자동화 처리
            3. 특정 시간에 자동 업무처리
            등등
        3. 사용법
            1. AppStart 클래스 위에 '@EnableScheduling' 키워드 적용 하여 스케줄링 활성화
            2. 스케줄링을 적용할 메소드 위에 '@Scheduled( 패턴 )' 키워드 적용하여 스케줄링 메서드 정의
        4. 사용처
            1. 로그 , 백업 , 동기화
            2. 주기별 이메일 자동 전송 , 알림 자동 전송
        5. 패턴
            1. fixedRate( 촬케줄링 시간 ) : 촬케줄링 시간에 한번 실행
            2. fixedDelay( 촬케줄링 시간 ) : 촬케줄링 시간에 한번 실행
            3. cron( 촬케줄링 시간 ) : 촬케줄링 시간에 한번 실행(* 권장 *)
                (1) CRON (표현식)패턴
                    기본 생김새 : @Scheduled( * * * * * * );
                    첫번째 * : 초 : 0 ~ 59
                    두번째 * : 분 : 0 ~ 59
                    세번째 * : 시 : 0 ~ 23
                    네번째 * : 일 : 1 ~ 31
                    다섯번째 * : 월 : 1 ~ 31
                    여섯번째 * : 요일 : 0 ~ 6 ( 0 = sunday ~ )
                        -> ? : 지정하지 않은 자릿수 뜻 ,

                (2) 예시
                    1. 지정한 (5)초 마다 실행 : @Scheduled( cron = "*/5 * * * * *" )
                    2. 지정한 (10)분 마다 실행 : @Scheduled( cron = "0 */10 * * * *" )
                    3. 지정한 (1)시간 마다 실행 : @Scheduled( cron = "0 0 */1 * * *" )
                    4. 매월 1일에 오전9시 실행 : @Scheduled( cron = "0 0 9 1 * *" )
                    5. 매월 1일에 오전9시 30분 실행 : @Scheduled( cron = "0 30 9 1 * *" )
                    6. 매월 1일에 오전9시 30분 30초 실행 : @Scheduled( cron = "30 30 9 1 * *" )
                    7. 일요일 마다 오전 11시 실행 : @Scheduled( cron = "0 0 11 * * 0" ) 0 또는 SUN
                    8. 주말(일/토) 마다 오전 11시 실행 : @Scheduled( cron = "0 0 11 ? * WED" )

        6. 주의할점 : REST API response 안된다.
            -> 백그라운드 처리 이므로 HTTP response 불가능하다.
            -->
                      http 프로토콜       vs        w(web)(socket) 프로토콜
            차이점     연결상태유지안함                   연결상태유지함
